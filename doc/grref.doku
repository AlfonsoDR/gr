====== GR Function Reference for Python ======
This is a procedural interface to the GR plotting library, which may be
imported directly, e.g.:

<code python>
import gr
</code>

===== Output Functions =====

==== gr.polyline ====
Draws a polyline using the current line attributes, starting from the
first data point and ending at the last data point.

<code python>
polyline(n, x, y)
</code>

== Parameters ==
  * //n// --- The number of points in the line to be drawn (//n// > 1)
  * //x// --- A list of length //n// containing the X coordinate
  * //y// --- A list of length //n// containing the Y coordinate

The values for //x// and //y// are in world coordinates. The attributes that
control the appearance of a polyline are linetype, linewidth and color
index.

==== gr.polymarker ====
Draws marker symbols centered at the given data points.

<code python>
polymarker(n, x, y)
</code>

== Parameters ==
  * //n// --- The number of markers to be drawn
  * //x// --- A list of length //n// containing the X coordinate
  * //y// --- A list of length //n// containing the Y coordinate

The values for //x// and //y// are in world coordinates. The attributes that
control the appearance of a polyline are marker type, marker size
scale factor and color index.

==== gr.text ====
Draws a text at position //x, y// using the current text attributes.

<code python>
text(x, y, string)
</code>

== Parameters ==
  * //x// --- The X coordinate of starting position of the text string
  * //y// --- The Y coordinate of starting position of the text string
  * //string// --- The text to be drawn

The values for //x// and //y// are in normalized device coordinates.
The attributes that control the appearance of text are text font and precision,
character expansion factor, character spacing, text color index, character
height, character up vector, text path and text alignment.

==== gr.fillarea ====
Allows you to specify a polygonal shape of an area to be filled.

<code python>
fillarea(n, x, y)
</code>

== Parameters ==
  * //n// --- The number of points in the polygon to be drawn (//n// > 2)
  * //x// --- A list of length //n// containing the X coordinate
  * //y// --- A list of length //n// containing the Y coordinate

The attributes that control the appearance of fill areas are fill area interior
style, fill area style index and fill area color index.

==== gr.cellarray ====
Displays rasterlike images in a device-independent manner. The cell array
function partitions a rectangle given by two corner points into //dimx x dimy//
cells, each of them colored individually by the corresponding color index
of the given cell array.

<code python>
cellarray(xmin, xmax, ymin, ymax, dimx, dimy, color)
</code>

== Parameters ==
  * //xmin, ymin// --- Lower left point of the rectangle
  * //xmax, ymax// --- Upper right point of the rectangle
  * //dimx, dimy// --- X and Y dimension of the color index array
  * //color// --- Color index array

The values for //xmin//, //xmax//, //ymin// and //ymax// are in world coordinates.

==== gr.spline ====
Generates a cubic spline-fit, starting from the first data point and
ending at the last data point.

<code python>
spline(n, x, y, m, method)
</code>

== Parameters ==
  * //n// --- The number of data points (//n// > 1)
  * //x// --- A list of length //n// containing the X coordinate
  * //y// --- A list of length //n// containing the Y coordinate
  * //m// --- The number of points in the polygon to be drawn (//m// > //n//)
  * //method// --- The smoothing method

The values for X and Y are in world coordinates. The attributes that
control the appearance of a spline-fit are linetype, linewidth and color
index.

If //method// is > 0, then a generalized cross-validated smoothing spline is calculated.
If //method// is 0, then an interpolating natural cubic spline is calculated.
If //method// is < -1, then a cubic B-spline is calculated.

==== gr.textext ====
Draws a text at position //x, y// using the current text attributes. Strings can be
defined to create basic mathematical expressions and Greek letters. 

<code python>
textext(x, y, string)
</code>

== Parameters ==
  * //x// --- The X coordinate of starting position of the text string
  * //y// --- The Y coordinate of starting position of the text string
  * //string// --- The text to be drawn

The values for //x// and //y// are in normalized device coordinates.
The attributes that control the appearance of text are text font and precision,
character expansion factor, character spacing, text color index, character
height, character up vector, text path and text alignment.

The character string is interpreted to be a simple mathematical formula.
The following notations apply: 

  * Subscripts and superscripts: These are indicated by carets (''^'') and underscores (''_''). If the sub/superscript contains more than one character, it must be enclosed in curly braces (''{}'').
  * Fractions are typeset with //a// ''/'' //b//, where //a// stands for the numerator and //b// for the denominator.
  * To include a Greek letter you must specify the corresponding keyword after a backslash (''\'') character. The text translator produces uppercase or lowercase Greek letters depending on the case of the keyword.

| Letter | Keyword |
|Α α | alpha |
|Β β | beta |
|Γ γ | gamma |
|Δ δ | delta |
|Ε ε | epsilon |
|Ζ ζ | zeta |
|Η η | eta |
|Θ θ | theta |
|Ι ι | iota |
|Κ κ | kappa |
|Λ λ | lambda |
|Μ μ | mu |
|Ν ν | nu |
|Ξ ξ | xi |
|Ο ο | omicron |
|Π π | pi |
|Ρ ρ | rho |
|Σ σ | sigma |
|Τ τ | tau |
|Υ υ | upsilon |
|Φ φ | phi |
|Χ χ | chi |
|Ψ ψ | psi |
|Ω ω | omega |

For more sophisticated mathematical formulas, you should use the ''gr.mathtex'' function.

==== gr.inqtextext ====
Inquires the text extent rectangle for a text at position //x, y//.

<code python>
tbx, tby = inqtextext(x, y, string)
</code>

== Parameters ==
  * //x// --- The X coordinate of starting position of the text string
  * //y// --- The Y coordinate of starting position of the text string
  * //string// --- The text to be measured

== Returns ==
  * //tbx// --- The X coordinates of the text extent rectangle
  * //tby// --- The Y coordinates of the text extent rectangle

The resulting text box is calculated from the concatenated character bodies of
the string. The current text attributes relate to the text extent rectangle.

==== gr.axes ====
Draws X and Y coordinate axes with linearly and/or logarithmically spaced tick marks.

<code python>
axes(x_tick, y_tick, x_org, y_org, major_x, major_y, tick_size)
</code>

== Parameters ==
  * //x_tick, y_tick// --- The interval between minor tick marks on each axis
  * //x_org, y_org// --- The world coordinates of the origin (point of intersection) of the X and Y axes.
  * //major_x, major_y// --- Unitless integer values specifying the number of minor tick intervals between major tick marks. Values of 0 or 1 imply no minor ticks. Negative values specify no labels will be drawn for the associated axis.
  * //tick_size// --- The length of minor tick marks specified in a normalized device coordinate unit. Major tick marks are twice as long as minor tick marks. A negative value reverses the tick marks on the axes from inward facing to outward facing (or vice versa). 

Tick marks are positioned along each axis so that major tick marks fall on the axes
origin (whether visible or not). Major tick marks are labeled with the corresponding
data values. Axes are drawn according to the scale of the window. Axes and tick marks
are drawn using solid lines; line color and width can be modified using the
//setlinetype// and //setlinewidth// functions. Axes are drawn according to
the linear or logarithmic transformation established by the //setscale// function.

==== gr.grid ====
Draws a linear and/or logarithmic grid.

<code python>
grid(x_tick, y_tick, x_org, y_org, major_x, major_y)
</code>

== Parameters ==
  * //x_tick, y_tick// --- The length in world coordinates of the interval between minor grid lines.
  * //x_org, y_org// --- The world coordinates of the origin (point of intersection) of the grid.
  * //major_x, major_y// --- Unitless integer values specifying the number of minor grid lines between major grid lines. Values of 0 or 1 imply no grid lines.

Major grid lines correspond to the axes origin and major tick marks whether visible or not.
Minor grid lines are drawn at points equal to minor tick marks.
Major grid lines are drawn using solid lines and minor grid lines are drawn using dotted lines.

==== gr.verrorbars ====
Draws a standard vertical error bar graph.

<code python>
verrorbars(n, px, py, e1, e2)
</code>

== Parameters ==
  * //n// --- The number of error bars to be drawn
  * //px// --- A list of length //n// containing the X coordinate
  * //py// --- A list of length //n// containing the Y coordinate
  * //e1// --- The absolute value of the negative deviation at the given point
  * //e2// --- The absolute value of the positive deviation at the given point

==== gr.herrorbars ====
Draws a standard horizontal error bar graph.

<code python>
herrorbars(n, px, py, e1, e2)
</code>

== Parameters ==
  * //n// --- The number of error bars to be drawn
  * //px// --- A list of length //n// containing the X coordinate
  * //py// --- A list of length //n// containing the Y coordinate
  * //e1// --- The absolute value of the negative deviation at the given point
  * //e2// --- The absolute value of the positive deviation at the given point

==== gr.polyline3d ====
Draws a 3D curve using the current line attributes, starting from the
first data point and ending at the last data point.

<code python>
polyline3d(n, px, py, pz)
</code>

== Parameters ==
  * //n// --- The number of points in the line to be drawn (//n// > 1)
  * //x// --- A list of length //n// containing the X coordinate
  * //y// --- A list of length //n// containing the Y coordinate
  * //z// --- A list of length //n// containing the Z coordinate

The values for //x//, //y// and //z// are in world coordinates. The attributes that
control the appearance of a polyline are linetype, linewidth and color
index.

==== gr.axes3d ====
Draws X, Y and Z labeled coordinate axes with linearly and/or logarithmically spaced tick marks.

<code python>
axes3d(x_tick, y_tick, z_tick, x_org, y_org, z_org, major_x, major_y, major_z, tick_size)
</code>

== Parameters ==
  * //x_tick, y_tick, z_tick// --- The interval between minor tick marks on each axis
  * //x_org, y_org, z_org// --- The world coordinates of the origin (point of intersection) of the axes.
  * //major_x, major_y, major_z// --- Unitless integer values specifying the number of minor tick intervals between major tick marks. Values of 0 or 1 imply no minor ticks. Negative values specify no labels will be drawn for the associated axis.
  * //tick_size// --- The length of minor tick marks specified in a normalized device coordinate unit. Major tick marks are twice as long as minor tick marks. A negative value reverses the tick marks on the axes from inward facing to outward facing (or vice versa). 

Tick marks are positioned along each axis so that major tick marks fall on the axes
origin (whether visible or not). Major tick marks are labeled with the corresponding
data values. Axes are drawn according to the scale of the window. Axes and tick marks
are drawn using solid lines; line color and width can be modified using the
//setlinetype// and //setlinewidth// functions. Axes are drawn according to
the linear or logarithmic transformation established by the //setscale// function.
The //setspace// function defines the rotation and tilt (viewing angle) of the axes and
sets the Z-axis minimum and maximum values for the window. 

==== gr.titles3d ====
Displays axis titles just outside of their respective axes.

<code python>
titles3d(x_title, y_title, z_title)
</code>

== Parameters ==
  * //x_title, y_title, z_title// --- The text to be displayed on each axis

==== gr.surface ====
Draws a three-dimensional surface plot for the given data points.

<code python>
surface(nx, ny, x, y, z, option)
</code>

== Parameters ==
  * //nx// --- The number of points in the X direction (//nx// > 1)
  * //ny// --- The number of points in the Y direction (//ny// > 1)
  * //x// --- A list of length //ny// containing the X coordinate
  * //y// --- A list of length //ny// containing the Y coordinate
  * //z// --- A list of length //nx//*//ny// containing the Z coordinate
  * //option// --- Surface display option (see table below)

//x// and //y// define a grid. //z// is a singly dimensioned array containing at least
//x// * //y// data points. //z// describes the surface height at each point on the grid.
Data is ordered as shown in the following table:

| ''LINES''  | 0| Use X Y polylines to denote surface  |
| ''MESH'' | 1| Use wire grid to denote surface  |
| ''FILLED_MESH''  | 2| Applies opaque grid to surface  |
| ''COLORED_MESH''  | 3| Applies colored grid to surface  |
| ''CELL_ARRAY''  | 4| Applies a grid of individually-colored cells to the surface  |
| ''SHADED_MESH''  | 5| Applies light source shading to 3-D surface  |
| ''Z_SHADED_MESH''  | 6| Applies Z-value shading to surface  |

==== gr.contour ====
Draws contours of a three-dimensional data set whose values are specified over a
rectangular mesh. Contour lines may optionally be labeled. 

<code python>
contour(nx, ny, nh, x, y, h, z, major_h)
</code>

== Parameters ==
  * //nx// --- The number of points in the X direction (//nx// > 1)
  * //ny// --- The number of points in the Y direction (//ny// > 1)
  * //nh// --- The number of height values (//nh// > 0)
  * //x// --- A list of length //ny// containing the X coordinate
  * //y// --- A list of length //ny// containing the Y coordinate
  * //h// --- A list of length //nh// containing the Z coordinate for the height values
  * //z// --- A list of length //nx//*//ny// containing the Z coordinate
  * //major_h// --- Directs GR to label contour lines. For example, a value of 3 would label every third line. A value of 1 will label every line. A value of 0 produces no labels.

==== gr.drawrect ====
Draws a rectangle using the current line attributes.

<code python>
drawrect(xmin, xmax, ymin, ymax)
</code>

== Parameters ==
  * //xmin// --- Lower left edge of the rectangle
  * //xmax// --- Lower right edge of the rectangle
  * //ymin// --- Upper left edge of the rectangle
  * //ymax// --- Upper right edge of the rectangle

==== gr.fillrect ====
Draws a filled rectangle using the current fill attributes.

<code python>
fillrect(xmin, xmax, ymin, ymax)
</code>

== Parameters ==
  * //xmin// --- Lower left edge of the rectangle
  * //xmax// --- Lower right edge of the rectangle
  * //ymin// --- Upper left edge of the rectangle
  * //ymax// --- Upper right edge of the rectangle

==== gr.drawarc ====
Draws a circular or elliptical arc covering the specified rectangle.

<code python>
drawarc(xmin, xmax, ymin, ymax, a1, a2)
</code>

== Parameters ==
  * //xmin// --- Lower left edge of the rectangle
  * //xmax// --- Lower right edge of the rectangle
  * //ymin// --- Upper left edge of the rectangle
  * //ymax// --- Upper right edge of the rectangle
  * //a1// --- The start angle
  * //a2// --- The end angle

The resulting arc begins at //a1// and ends at //a2// degrees. Angles are interpreted such
that 0 degrees is at the 3 o'clock position. The center of the arc is the center of the
given rectangle.

==== gr.fillarc ====
Fills a circular or elliptical arc covering the specified rectangle.

<code python>
fillarc(xmin, xmax, ymin, ymax, a1, a2)
</code>

== Parameters ==
  * //xmin// --- Lower left edge of the rectangle
  * //xmax// --- Lower right edge of the rectangle
  * //ymin// --- Upper left edge of the rectangle
  * //ymax// --- Upper right edge of the rectangle
  * //a1// --- The start angle
  * //a2// --- The end angle

The resulting arc begins at //a1// and ends at //a2// degrees. Angles are interpreted such
that 0 degrees is at the 3 o'clock position. The center of the arc is the center of the
given rectangle.

==== gr.drawarrow ====
Draw an arrow between two points.

<code python>
drawarrow(x1, y1, x2, y2)
</code>

== Parameters ==
  * //x1, y1// --- Starting point of the arrow (tail)
  * //x2, y2// --- Head of the arrow

Different arrow styles (angles between arrow tail and wing, optionally filled
heads, double headed arrows) are available and can be set with the //setarrowstyle//
function.

==== gr.drawimage ====
Draws an image into a given rectangular area.

<code python>
drawimage(xmin, xmax, ymin, ymax, width, height, data)
</code>

== Parameters ==
  * //xmin, ymin// --- First corner point of the rectangle
  * //xmax, ymax// --- Second corner point of the rectangle
  * //width, height// --- The width and the height of the image
  * //data// --- An array of RGB values dimensioned //width// by //height//

The points (//xmin, ymin//) and (//xmax, ymax//) are world coordinates defining
diagonally opposite corner points of a rectangle. This rectangle is divided into
//width// by //height// cells. The two-dimensional array //data// specifies colors
for each cell.

==== gr.mathtex ====
Generates a character string starting at the given location. Strings can be defined
to create mathematical symbols and Greek letters using LaTeX syntax.

<code python>
mathtex(x, y, string)
</code>

== Parameters ==
  * //x, y// --- Position of the text string specified in world coordinates
  * //string// --- The text string to be drawn

===== Attribute Functions =====

==== gr.setlinetype ====
Specifies the line style for polylines.

<code python>
setlinetype(style)
</code>

== Parameters ==
  * //style// --- The polyline line style

The available line types are:

| ''LINETYPE_SOLID''  |  1| Solid line  |
| ''LINETYPE_DASHED''  |  2| Dashed line  |
| ''LINETYPE_DOTTED''  |  3| Dotted line  |
| ''LINETYPE_DASHED_DOTTED''  |  4| Dashed-dotted line  |
| ''LINETYPE_DASH_2_DOT''  |  -1| Sequence of one dash followed by two dots  |
| ''LINETYPE_DASH_3_DOT''  |  -2| Sequence of one dash followed by three dots  |
| ''LINETYPE_LONG_DASH''  |  -3| Sequence of long dashes  |
| ''LINETYPE_LONG_SHORT_DASH''  |  -4| Sequence of a long dash followed by a short dash  |
| ''LINETYPE_SPACED_DASH''  |  -5| Sequence of dashes double spaced  |
| ''LINETYPE_SPACED_DOT''  |  -6| Sequence of dots double spaced  |
| ''LINETYPE_DOUBLE_DOT'' |  -7| Sequence of pairs of dots  |
| ''LINETYPE_TRIPLE_DOT''  |  -8| Sequence of groups of three dots  |

==== gr.setlinewidth ====
Defines the line width of subsequent polyline output primitives.

<code python>
setlinewidth(width)
</code>

== Parameters ==
  * //width// --- The polyline line width scale factor

The line width is calculated as the nominal line width generated
on the workstation multiplied by the line width scale factor.
This value is mapped by the workstation to the nearest available line width.
The default line width is 1.0, or 1 times the line width generated on the graphics device.

==== gr.setlinecolorind ====
Defines the color of subsequent polyline output primitives.

<code python>
setlinecolorind(color)
</code>

== Parameters ==
  * //color// --- The polyline color index (//color// < 1000)

==== gr.setmarkertype ====
Specifies the marker type for polymarkers.

<code python>
setmarkertype(style)
</code>

== Parameters ==
  * //style// --- The polymarker marker type

The available marker types are:

| ''MARKERTYPE_DOT'' |  1| Smallest displayable dot |
| ''MARKERTYPE_PLUS'' |  2| Plus sign |
| ''MARKERTYPE_ASTERISK'' |  3| Asterisk |
| ''MARKERTYPE_CIRCLE'' |  4| Hollow circle |
| ''MARKERTYPE_DIAGONAL_CROSS'' |  5| Diagonal cross |
| ''MARKERTYPE_SOLID_CIRCLE'' |  -1| Filled circle |
| ''MARKERTYPE_TRIANGLE_UP'' |  -2| Hollow triangle pointing upward |
| ''MARKERTYPE_SOLID_TRI_UP'' |  -3| Filled triangle pointing upward |
| ''MARKERTYPE_TRIANGLE_DOWN'' |  -4| Hollow triangle pointing downward |
| ''MARKERTYPE_SOLID_TRI_DOWN'' |  -5| Filled triangle pointing downward |
| ''MARKERTYPE_SOLID_TRI_LEFT'' |  -6| Filled triangle pointing left |
| ''MARKERTYPE_SOLID_TRI_RIGHT'' |  -7| Filled triangle point right |
| ''MARKERTYPE_TRI_UP_DOWN'' |  -8| Hollow triangles pointing up and down overlaid |
| ''MARKERTYPE_SQUARE'' |  -9| Hollow square |
| ''MARKERTYPE_SOLID_SQUARE'' |  -10| Filled square |
| ''MARKERTYPE_BOWTIE'' |  -11| Hollow bowtie |
| ''MARKERTYPE_SOLID_BOWTIE'' |  -12| Filled bowtie |
| ''MARKERTYPE_STAR'' |  -13| Hollow star |
| ''MARKERTYPE_SOLID_STAR'' |  -14| Filled Star |
| ''MARKERTYPE_DIAMOND'' |  -15| Hollow diamond |
| ''MARKERTYPE_SOLID_DIAMOND'' |  -16| Filled Diamond |
| ''MARKERTYPE_HGLASS'' |  -17| Hollow hourglass |
| ''MARKERTYPE_SOLID_HGLASS'' |  -18| Filled hourglass |
| ''MARKERTYPE_HOLLOW PLUS'' |  -19| Hollow plus sign |
| ''MARKERTYPE_SOLID PLUS'' |  -20| Solid plus sign |

Polymarkers appear centered over their specified coordinates.

==== gr.setmarkersize ====
Specifies the marker size for polymarkers.

<code python>
setmarkersize(size)
</code>

== Parameters ==
  * //size// --- Scale factor applied to the nominal marker size

The polymarker size is calculated as the nominal size generated on the graphics device
multiplied by the marker size scale factor.

==== gr.setmarkercolorind ====
Defines the color of subsequent polymarker output primitives.

<code python>
setmarkercolorind(color)
</code>

== Parameters ==
  * //color// --- The polymarker color index (//color// < 1000)

==== gr.settextfontprec ====
Specifies the text font and precision for subsequent text output primitives.

<code python>
settextfontprec(font, precision)
</code>

== Parameters ==
  * //font// --- Text font (see tables below)
  * //precision// --- Text precision (see table below)

The available text fonts are:

| ''FONT_TIMES_ROMAN'' |  101|
| ''FONT_TIMES_ITALIC'' |  102|
| ''FONT_TIMES_BOLD'' |  103|
| ''FONT_TIMES_BOLDITALIC'' |  104|
| ''FONT_HELVETICA'' |  105|
| ''FONT_HELVETICA_OBLIQUE'' |  106|
| ''FONT_HELVETICA_BOLD'' |  107|
| ''FONT_HELVETICA_BOLDOBLIQUE'' |  108|
| ''FONT_COURIER'' |  109|
| ''FONT_COURIER_OBLIQUE'' |  110|
| ''FONT_COURIER_BOLD'' |  111|
| ''FONT_COURIER_BOLDOBLIQUE'' |  112|
| ''FONT_SYMBOL'' |  113|
| ''FONT_BOOKMAN_LIGHT'' |  114|
| ''FONT_BOOKMAN_LIGHTITALIC'' |  115|
| ''FONT_BOOKMAN_DEMI'' |  116|
| ''FONT_BOOKMAN_DEMIITALIC'' |  117|
| ''FONT_NEWCENTURYSCHLBK_ROMAN'' |  118|
| ''FONT_NEWCENTURYSCHLBK_ITALIC'' |  119|
| ''FONT_NEWCENTURYSCHLBK_BOLD'' |  120|
| ''FONT_NEWCENTURYSCHLBK_BOLDITALIC'' |  121|
| ''FONT_AVANTGARDE_BOOK'' |  122|
| ''FONT_AVANTGARDE_BOOKOBLIQUE'' |  123|
| ''FONT_AVANTGARDE_DEMI'' |  124|
| ''FONT_AVANTGARDE_DEMIOBLIQUE'' |  125|
| ''FONT_PALATINO_ROMAN'' |  126|
| ''FONT_PALATINO_ITALIC'' |  127|
| ''FONT_PALATINO_BOLD'' |  128|
| ''FONT_PALATINO_BOLDITALIC'' |  129|
| ''FONT_ZAPFCHANCERY_MEDIUMITALIC'' |  130|
| ''FONT_ZAPFDINGBATS'' |  131|

The available text precisions are:

| ''TEXT_PRECISION_STRING'' |  0| String precision (higher quality) |
| ''TEXT_PRECISION_CHAR'' |  1| Character precision (medium quality) |
| ''TEXT_PRECISION_STROKE'' |  2| Stroke precision (lower quality) |

The appearance of a font depends on the text precision value specified.
STRING, CHARACTER or STROKE precision allows for a greater or lesser
realization of the text primitives, for efficiency. STRING is the default
precision for GR and produces the highest quality output.

==== gr.setcharexpan ====
Sets the current character expansion factor (width to height ratio).

<code python>
setcharexpan(factor)
</code>

== Parameters ==
  * //factor// --- Text expansion factor applied to the nominal text width-to-height ratio

//setcharexp// defines the width of subsequent text output primitives. The expansion
factor alters the width of the generated characters, but not their height. The default
text expansion factor is 1, or one times the normal width-to-height ratio of the text.

==== gr.settextcolorind ====
Sets the current text color index.

<code python>
settextcolorind(color)
</code>

== Parameters ==
  * //color// --- The text color index (//color// < 1000)

//settextcolorind// defines the color of subsequent text output primitives.
GR uses the default foreground color (black=1) for the default text color index.

==== gr.setcharheight ====
Sets the current character height.

<code python>
setcharheight(height)
</code>

== Parameters ==
  * //height// --- Text height value

//setcharheight// defines the height of subsequent text output primitives. Text height
is defined as a percentage of the default window. GR uses the default text height of 0.027
(2.7% of the height of the default window).

==== gr.setcharup ====
Sets the current character text angle up vector.

<code python>
setcharup(ux, uy)
</code>

== Parameters ==
  * //ux, uy// --- Text up vector

//setcharup// defines the vertical rotation of subsequent text output primitives.
The text up vector is initially set to (0, 1), horizontal to the baseline.

==== gr.settextpath ====
Define the current direction in which subsequent text will be drawn.

<code python>
settextpath(path)
</code>

== Parameters ==
  * //path// --- Text path (see table below)

| ''TEXT_PATH_RIGHT''  |  0| left-to-right |
| ''TEXT_PATH_LEFT''  |  1| right-to-left |
| ''TEXT_PATH_UP''  |  2|  downside-up |
| ''TEXT_PATH_DOWN''  |  3| upside-down |

==== gr.settextalign ====
Sets the current horizontal and vertical alignment for text.

<code python>
settextalign(horizontal, vertical)
</code>

== Parameters ==
  * //horizontal// --- Horizontal text alignment (see the table below)
  * //vertical// --- Vertical text alignment (see the table below)

//settextalign// specifies how the characters in a text primitive will be aligned
in horizontal and vertical space. The default text alignment indicates horizontal left
alignment and vertical baseline alignment.

| ''TEXT_HALIGN_NORMAL''  |  0|  |
| ''TEXT_HALIGN_LEFT''  |  1| Left justify |
| ''TEXT_HALIGN_CENTER''  |  2| Center justify |
| ''TEXT_HALIGN_RIGHT''  |  3| Right justify |

| ''TEXT_VALIGN_NORMAL''  |  0|  |
| ''TEXT_VALIGN_TOP''  |  1| Align with the top of the characters |
| ''TEXT_VALIGN_CAP''  |  2| Aligned with the cap of the characters |
| ''TEXT_VALIGN_HALF''  |  3| Aligned with the half line of the characters |
| ''TEXT_VALIGN_BASE''  |  4| Aligned with the base line of the characters |
| ''TEXT_VALIGN_BOTTOM''  |  5| Aligned with the bottom line of the characters |

==== gr.setfillintstyle ====
Sets the fill area interior style to be used for fill areas.

<code python>
setfillintstyle(style)
</code>

== Parameters ==
  * //style// --- The style of fill to be used

//setfillintstyle// defines the interior style  for subsequent fill area output
primitives. The default interior style is HOLLOW.

| ''HOLLOW''  |  0| No filling. Just draw the bounding polyline|
| ''SOLID''  |  1| Fill the interior of the polygon using the fill color index|
| ''PATTERN''  |  2| Fill the interior of the polygon using the style index as a pattern index|
| ''HATCH''  |  3| Fill the interior of the polygon using the style index as a cross-hatched style|

==== gr.setfillstyle ====
Sets the fill style to be used for subsequent fill areas.

<code python>
setfillstyle(index)
</code>

== Parameters ==
  * //index// --- The fill style index to be used

//setfillstyle// specifies an index when PATTERN fill or HATCH fill is requested by the
//setfillintstyle// function. If the interior style is set to PATTERN, the fill style
index points to a device-independent pattern table. If interior style is set to HATCH
the fill style index indicates different hatch styles. If HOLLOW or SOLID is specified
for the interior style, the fill style index is unused.

==== gr.setfillcolorind ====
Sets the current fill area color index.

<code python>
setfillcolorind(color)
</code>

== Parameters ==
  * //color// --- The fill area color index (//color// < 1000)

//setfillcolorind// defines the color of subsequent fill area output primitives.
GR uses the default foreground color (black=1) for the default fill area color index.

==== gr.setarrowstyle ====
FIXME

<code python>
setarrowstyle(style)
</code>

== Parameters ==
  * //style// --- FIXME

==== gr.setshadow ====
FIXME

<code python>
setshadow(offsetx, offsety, blur)
</code>

== Parameters ==
  * //offsetx// --- FIXME
  * //offsety// --- FIXME
  * //blur// --- FIXME

==== gr.settransparency ====
FIXME

<code python>
settransparency(alpha)
</code>

== Parameters ==
  * //alpha// --- FIXME

===== Transformation Functions =====

==== gr.setscale ====
FIXME

<code python>
setscale(options)
</code>

== Parameters ==
  * //options// --- FIXME

==== gr.inqscale ====
FIXME

<code python>
inqscale(options)
</code>

== Parameters ==
  * //options// --- FIXME

==== gr.setwindow ====
FIXME

<code python>
setwindow(xmin, xmax, ymin, ymax)
</code>

== Parameters ==
  * //xmin// --- FIXME
  * //xmax// --- FIXME
  * //ymin// --- FIXME
  * //ymax// --- FIXME

==== gr.inqwindow ====
FIXME

<code python>
inqwindow(xmin, xmax, ymin, ymax)
</code>

== Parameters ==
  * //xmin// --- FIXME
  * //xmax// --- FIXME
  * //ymin// --- FIXME
  * //ymax// --- FIXME

==== gr.setviewport ====
FIXME

<code python>
setviewport(xmin, xmax, ymin, ymax)
</code>

== Parameters ==
  * //xmin// --- FIXME
  * //xmax// --- FIXME
  * //ymin// --- FIXME
  * //ymax// --- FIXME

==== gr.selntran ====
FIXME

<code python>
selntran(transform)
</code>

== Parameters ==
  * //transform// --- FIXME

==== gr.setclip ====
FIXME

<code python>
setclip(indicator)
</code>

== Parameters ==
  * //indicator// --- FIXME

==== gr.setwswindow ====
FIXME

<code python>
setwswindow(xmin, xmax, ymin, ymax)
</code>

== Parameters ==
  * //xmin// --- FIXME
  * //xmax// --- FIXME
  * //ymin// --- FIXME
  * //ymax// --- FIXME

==== gr.setwsviewport ====
FIXME

<code python>
setwsviewport(xmin, xmax, ymin, ymax)
</code>

== Parameters ==
  * //xmin// --- FIXME
  * //xmax// --- FIXME
  * //ymin// --- FIXME
  * //ymax// --- FIXME

==== gr.setspace ====
FIXME

<code python>
setspace(zmin, zmax, rotation, tilt)
</code>

== Parameters ==
  * //zmin// --- FIXME
  * //zmax// --- FIXME
  * //rotation// --- FIXME
  * //tilt// --- FIXME

==== gr.inqspace ====
FIXME

<code python>
inqspace(zmin, zmax, rotation, tilt)
</code>

== Parameters ==
  * //zmin// --- FIXME
  * //zmax// --- FIXME
  * //rotation// --- FIXME
  * //tilt// --- FIXME

==== gr.setcoordxform ====
FIXME

<code python>
setcoordxform(mat[3][2])
</code>

== Parameters ==
  * //mat[3][2]// --- FIXME

===== Control Functions =====

==== gr.clearws ====
FIXME

<code python>
clearws()
</code>

==== gr.updatews ====
FIXME

<code python>
updatews()
</code>

==== gr.beginprint ====
FIXME

<code python>
beginprint(pathname)
</code>

== Parameters ==
  * //pathname// --- FIXME

==== gr.beginprintext ====
FIXME

<code python>
beginprintext(pathname, mode, format, orientation)
</code>

== Parameters ==
  * //pathname// --- FIXME
  * //mode// --- FIXME
  * //format// --- FIXME
  * //orientation// --- FIXME

==== gr.endprint ====
FIXME

<code python>
endprint()
</code>

==== gr.begingraphics ====
FIXME

<code python>
begingraphics(path)
</code>

== Parameters ==
  * //path// --- FIXME

==== gr.endgraphics ====
FIXME

<code python>
endgraphics()
</code>

==== gr.setcolorrep ====
FIXME

<code python>
setcolorrep(index, red, green, blue)
</code>

== Parameters ==
  * //index// --- FIXME
  * //red// --- FIXME
  * //green// --- FIXME
  * //blue// --- FIXME

==== gr.updategks ====
FIXME

<code python>
updategks()
</code>

==== gr.opengks ====
FIXME

<code python>
opengks()
</code>

==== gr.closegks ====
FIXME

<code python>
closegks()
</code>

==== gr.inqdspsize ====
FIXME

<code python>
inqdspsize(mwidth, mheight, width, height)
</code>

== Parameters ==
  * //mwidth// --- FIXME
  * //mheight// --- FIXME
  * //width// --- FIXME
  * //height// --- FIXME

==== gr.openws ====
FIXME

<code python>
openws(workstation_id, connection, type)
</code>

== Parameters ==
  * //workstation_id// --- FIXME
  * //connection// --- FIXME
  * //type// --- FIXME

==== gr.closews ====
FIXME

<code python>
closews(workstation_id)
</code>

== Parameters ==
  * //workstation_id// --- FIXME

==== gr.activatews ====
FIXME

<code python>
activatews(workstation_id)
</code>

== Parameters ==
  * //workstation_id// --- FIXME

==== gr.deactivatews ====
FIXME

<code python>
deactivatews(workstation_id)
</code>

== Parameters ==
  * //workstation_id// --- FIXME

==== gr.emergencyclosegks ====
FIXME

<code python>
emergencyclosegks()
</code>

===== Segment Functions =====

==== gr.createseg ====
FIXME

<code python>
createseg(segment)
</code>

== Parameters ==
  * //segment// --- FIXME

==== gr.copysegws ====
FIXME

<code python>
copysegws(segment)
</code>

== Parameters ==
  * //segment// --- FIXME

==== gr.redrawsegws ====
FIXME

<code python>
redrawsegws()
</code>

==== gr.setsegtran ====
FIXME

<code python>
setsegtran(segment, fx, fy, transx, transy, phi, scalex, scaley)
</code>

== Parameters ==
  * //segment// --- FIXME
  * //fx// --- FIXME
  * //fy// --- FIXME
  * //transx// --- FIXME
  * //transy// --- FIXME
  * //phi// --- FIXME
  * //scalex// --- FIXME
  * //scaley// --- FIXME

==== gr.setcolormap ====
FIXME

<code python>
setcolormap(index)
</code>

== Parameters ==
  * //index// --- FIXME

===== Miscellaneous Functions =====

==== gr.colormap ====
FIXME

<code python>
colormap()
</code>

==== gr.inqcolor ====
FIXME

<code python>
inqcolor(color, rgb)
</code>

== Parameters ==
  * //color// --- FIXME
  * //rgb// --- FIXME

==== gr.tick ====
FIXME

<code python>
tick(amin, amax)
</code>

== Parameters ==
  * //amin// --- FIXME
  * //amax// --- FIXME

==== gr.adjustrange ====
FIXME

<code python>
adjustrange(amin, amax)
</code>

== Parameters ==
  * //amin// --- FIXME
  * //amax// --- FIXME

==== gr.ndctowc ====
FIXME

<code python>
ndctowc(x, y)
</code>

== Parameters ==
  * //x// --- FIXME
  * //y// --- FIXME

==== gr.wctondc ====
FIXME

<code python>
wctondc(x, y)
</code>

== Parameters ==
  * //x// --- FIXME
  * //y// --- FIXME

==== gr.beginselection ====
FIXME

<code python>
beginselection(index, type)
</code>

== Parameters ==
  * //index// --- FIXME
  * //type// --- FIXME

==== gr.endselection ====
FIXME

<code python>
endselection()
</code>

==== gr.moveselection ====
FIXME

<code python>
moveselection(x, y)
</code>

== Parameters ==
  * //x// --- FIXME
  * //y// --- FIXME

==== gr.resizeselection ====
FIXME

<code python>
resizeselection(type, x, y)
</code>

== Parameters ==
  * //type// --- FIXME
  * //x// --- FIXME
  * //y// --- FIXME

==== gr.inqbbox ====
FIXME

<code python>
inqbbox(xmin, xmax, ymin, ymax)
</code>

== Parameters ==
  * //xmin// --- FIXME
  * //xmax// --- FIXME
  * //ymin// --- FIXME
  * //ymax// --- FIXME


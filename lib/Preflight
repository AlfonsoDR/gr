#!/bin/bash

target=`uname`
wxdefs=""
qtdefs=""
gtkdefs=""
gsdefs=""
glfwdefs=""
zmqdefs=""

wxconfig=wx-config
if [ "$WX_CONFIG" != "" ]
then
  wxconfig=$WX_CONFIG
fi
if [ "`which $wxconfig 2>/dev/null`" = "" ]
then
  echo "wx-config not found. Build without wxWidgets support." >&2
  wxdefs="WX_CONFIG=false WXDEFS=-DNO_WX WXINC= WXLIBS="
else
  wxdefs="WX_CONFIG=$wxconfig"
fi

message=""
if [ "$QTDIR" = "" ]
then
  message="QTDIR not set. Build without Qt4 support." 
elif [ -f $QTDIR/bin/qmake ]; then
  version=`$QTDIR/bin/qmake -v 2>&1 | grep 'Qt 3\.'`
  if [ "$version" != "" ]; then
    message="QTDIR points to an old Qt version."
  fi
else
  message="Unable to obtain Qt version number."
fi

if [ "$message" != "" ]; then
  echo $message >&2
  echo "Do you want to continue? [y/n]" >&2
  read yesno
  if [ "$yesno" = "y" ]; then
    qtdefs="QTDEFS=-DNO_QT4 QTINC= QTLIBS="
  else
    echo -e "Please retry with a valid QTDIR setting, e.g.\n\
	/usr/lib64/qt4	(Red Hat)\n\
	/usr/share/qt4	(Ubuntu)\n\
	/usr/local/qt4\n" >&2
    target="nothing"
  fi
fi

if [ "`pkg-config gtk+-2.0 --cflags 2>/dev/null`" = "" ]
then
  echo "gtk+-2.0 not found. Build without GTK+ support." >&2
  gtkdefs="GTK_CONFIG=false GTKDEFS=-DNO_GTK GTKINC= GTKLIBS="
else
  gtkdefs="GTK_CONFIG=pkg-config"
fi

tmpout=`mktemp /tmp/a.out.XXXXX`
tmpsrc=`mktemp /tmp/a$$XXXXX.c`
cat >$tmpsrc << eof
#include <stdio.h>
#include <stdlib.h>
#include <ghostscript/iapi.h>

int main()
{
  gsapi_revision_t r;
  if (gsapi_revision(&r, sizeof(gsapi_revision_t)) == 0)
    fprintf(stderr, "%ld\n", r.revision);
  exit(0);
}
eof
cmd="cc -o $tmpout $tmpsrc -lgs"
if [ `uname` = "Darwin" ]; then
  cmd="$cmd -L/usr/X11/lib -lXt -lX11 -liconv"
fi
$cmd >/dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "Ghostscript API not found. Build without Ghostscript support." >&2
  echo "Do you want to continue? [y/n]" >&2
  read yesno
  if [ "$yesno" = "y" ]; then
    gsdefs="GSDEFS=-DNO_GS GSINC= GSLIBS="
  else
    target="nothing"
  fi
fi
rm -f $tmpout $tmpsrc

tmpout=`mktemp /tmp/a.out.XXXXX`
tmpsrc=`mktemp /tmp/a$$XXXXX.c`
cat >$tmpsrc << eof
#include <GL/glfw.h>

int main(void)
{
    if (!glfwInit())
        return -1;
    return 0;
}
eof
cmd="cc -o $tmpout $tmpsrc -lglfw"
if [ `uname` = "Darwin" ]; then
  cmd="$cmd -framework OpenGL -framework Cocoa -framework IOKit"
else
  cmd="$cmd -lGL -lXrandr -lX11 -lrt"
fi
$cmd >/dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "GLFW API not found. Build without GLFW support." >&2
  echo "Do you want to continue? [y/n]" >&2
  read yesno
  if [ "$yesno" = "y" ]; then
    glfwdefs="GLFWDEFS=-DNO_GLFW GLFWLIBS="
  else
    target="nothing"
  fi
fi
rm -f $tmpout $tmpsrc

tmpout=`mktemp /tmp/a.out.XXXXX`
tmpsrc=`mktemp /tmp/a$$XXXXX.c`
cat >$tmpsrc << eof
#include <zmq.h>

int main(void)
{
    void *context = zmq_ctx_new();
    void *publisher = zmq_socket(context, ZMQ_PUSH);
    zmq_bind(publisher, "tcp://*:5556");
    zmq_send(publisher, "Hello", 5, 0);
    zmq_close(publisher);
    zmq_ctx_destroy(context);
    return 0;
}
eof
cmd="cc -o $tmpout $tmpsrc -lzmq"
$cmd >/dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "0MQ API not found. Build without 0MQ support." >&2
  echo "Do you want to continue? [y/n]" >&2
  read yesno
  if [ "$yesno" = "y" ]; then
    zmqdefs="ZMQDEFS=-DNO_ZMQ ZMQLIBS="
  else
    target="nothing"
  fi
fi
rm -f $tmpout $tmpsrc

echo $target $wxdefs $qtdefs $gtkdefs $gsdefs $glfwdefs $zmqdefs
